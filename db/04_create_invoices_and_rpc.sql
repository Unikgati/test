-- 04_create_invoices_and_rpc.sql
-- Invoices table plus SECURITY DEFINER RPC for fetch-by-token

CREATE TABLE IF NOT EXISTS public.invoices (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id bigint NOT NULL,
  total numeric NOT NULL,
  metadata jsonb,
  share_token text,
  created_at timestamptz NULL DEFAULT now()
);

CREATE UNIQUE INDEX IF NOT EXISTS idx_invoices_order_id_unique ON public.invoices USING btree (order_id);
CREATE UNIQUE INDEX IF NOT EXISTS idx_invoices_share_token_unique ON public.invoices USING btree (share_token);

ALTER TABLE public.invoices ENABLE ROW LEVEL SECURITY;

CREATE POLICY invoices_select_admin ON public.invoices
  FOR SELECT USING (public.auth_is_admin());

CREATE POLICY invoices_insert_admin ON public.invoices
  FOR INSERT WITH CHECK (public.auth_is_admin());

CREATE POLICY invoices_update_admin ON public.invoices
  FOR UPDATE USING (public.auth_is_admin())
  WITH CHECK (public.auth_is_admin());

CREATE POLICY invoices_delete_admin ON public.invoices
  FOR DELETE USING (public.auth_is_admin());

-- SECURITY DEFINER function to fetch invoice + order by token (named similar to previous)
CREATE OR REPLACE FUNCTION public.fetch_invoice_with_order_by_token(p_token text)
RETURNS TABLE(invoice jsonb, "order" jsonb) LANGUAGE plpgsql SECURITY DEFINER AS $$
BEGIN
  RETURN QUERY
  SELECT to_jsonb(i) AS invoice, to_jsonb(o) AS "order"
  FROM public.invoices i
  JOIN public.orders o ON o.id = i.order_id
  WHERE i.share_token = p_token;
END; $$;

COMMENT ON FUNCTION public.fetch_invoice_with_order_by_token IS 'SECURITY DEFINER RPC: returns invoice and order for a given public token (text)';
