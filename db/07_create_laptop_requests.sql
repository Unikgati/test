-- 07_create_laptop_requests.sql
-- Table to store laptop request forms submitted from the website

CREATE TABLE IF NOT EXISTS public.laptop_requests (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  destination_id bigint NOT NULL,
  customer_name text NOT NULL,
  customer_email text NULL,
  customer_phone text NULL,
  laptop_model text NULL,
  laptop_serial text NULL,
  power_requirements text NULL,
  seating_preference text NULL,
  notes text NULL,
  created_at timestamptz NOT NULL DEFAULT now()
);

ALTER TABLE public.laptop_requests ENABLE ROW LEVEL SECURITY;

-- Public read-only access (anyone may SELECT basic rows)
CREATE POLICY public_select_laptop_requests ON public.laptop_requests
  FOR SELECT USING (true);

-- Admins may select/update/delete/insert: centralized admin policy (mirrors destinations pattern)
CREATE POLICY admins_modify_laptop_requests ON public.laptop_requests
  FOR ALL USING (public.auth_is_admin())
  WITH CHECK (public.auth_is_admin());

-- Admins may select/update/delete: centralized admin policy (mirrors destinations pattern)
CREATE POLICY admins_modify_laptop_requests ON public.laptop_requests
  FOR ALL USING (public.auth_is_admin())
  WITH CHECK (public.auth_is_admin());

-- Ensure referential integrity: add foreign key to destinations if it doesn't already exist
DO $$
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM pg_constraint WHERE conname = 'fk_laptop_requests_destination_id'
  ) THEN
    EXECUTE 'ALTER TABLE public.laptop_requests ADD CONSTRAINT fk_laptop_requests_destination_id FOREIGN KEY (destination_id) REFERENCES public.destinations(id) ON DELETE RESTRICT';
  END IF;
END$$;

-- Optional index for destination lookup
CREATE INDEX IF NOT EXISTS idx_laptop_requests_destination_id ON public.laptop_requests(destination_id);
